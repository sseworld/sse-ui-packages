{"version":3,"file":"opts-arg.js","sourceRoot":"","sources":["../../../src/opts-arg.ts"],"names":[],"mappings":";;;AAAA,2BAOa;AAwDJ,MAAM,OAAO,GAAG,CAAC,IAAoB,EAAyB,EAAE;IACrE,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA;KACvB;SAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QACnC,IAAI,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,CAAA;KAChC;SAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QACnC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAA;KACtB;SAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QACnC,IAAI,GAAG,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAA;KACnC;SAAM;QACL,MAAM,IAAI,SAAS,CAAC,0BAA0B,CAAC,CAAA;KAChD;IAED,MAAM,QAAQ,GAAG,IAA6B,CAAA;IAC9C,MAAM,MAAM,GAAG,IAAI,CAAC,EAAE,IAAI,EAAE,CAAA;IAE5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,IAAI,UAAK,CAAA;IAEhD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU;QAC/B,CAAC,CAAC,IAAI,CAAC,UAAU;QACjB,CAAC,CAAC,KAAK,EACH,IAAY,EACZ,OAAuD,EAC1B,EAAE;YAC/B,OAAO,IAAI,OAAO,CAAqB,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAClD,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CACzC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CACzB,CACF,CAAA;QACH,CAAC,CAAA;IAEL,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,SAAI,CAAA;IAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS;QAC7B,CAAC,CAAC,IAAI,CAAC,SAAS;QAChB,CAAC,CAAC,KAAK,EAAE,IAAY,EAAE,EAAE,CACrB,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CACnE,CAAA;IAEP,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,aAAQ,CAAA;IAC5D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,IAAI,cAAS,CAAA;IAEhE,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA;AA3CY,QAAA,OAAO,WA2CnB","sourcesContent":["import {\r\n    MakeDirectoryOptions,\r\n    mkdir,\r\n    mkdirSync,\r\n    stat,\r\n    Stats,\r\n    statSync,\r\n  } from 'fs'\r\n  \r\n  export interface FsProvider {\r\n    stat?: (\r\n      path: string,\r\n      callback: (err: NodeJS.ErrnoException | null, stats: Stats) => any\r\n    ) => any\r\n    mkdir?: (\r\n      path: string,\r\n      opts: MakeDirectoryOptions & { recursive?: boolean },\r\n      callback: (err: NodeJS.ErrnoException | null, made?: string) => any\r\n    ) => any\r\n    statSync?: (path: string) => Stats\r\n    mkdirSync?: (\r\n      path: string,\r\n      opts: MakeDirectoryOptions & { recursive?: boolean }\r\n    ) => string | undefined\r\n  }\r\n  \r\n  interface Options extends FsProvider {\r\n    mode?: number | string\r\n    fs?: FsProvider\r\n    mkdirAsync?: (\r\n      path: string,\r\n      opts: MakeDirectoryOptions & { recursive?: boolean }\r\n    ) => Promise<string | undefined>\r\n    statAsync?: (path: string) => Promise<Stats>\r\n  }\r\n  \r\n  export type MkdirpOptions = Options | number | string\r\n  \r\n  export interface MkdirpOptionsResolved {\r\n    mode: number\r\n    fs: FsProvider\r\n    mkdirAsync: (\r\n      path: string,\r\n      opts: MakeDirectoryOptions & { recursive?: boolean }\r\n    ) => Promise<string | undefined>\r\n    statAsync: (path: string) => Promise<Stats>\r\n    stat: (\r\n      path: string,\r\n      callback: (err: NodeJS.ErrnoException | null, stats: Stats) => any\r\n    ) => any\r\n    mkdir: (\r\n      path: string,\r\n      opts: MakeDirectoryOptions & { recursive?: boolean },\r\n      callback: (err: NodeJS.ErrnoException | null, made?: string) => any\r\n    ) => any\r\n    statSync: (path: string) => Stats\r\n    mkdirSync: (\r\n      path: string,\r\n      opts: MakeDirectoryOptions & { recursive?: boolean }\r\n    ) => string | undefined\r\n    recursive?: boolean\r\n  }\r\n  \r\n  export const optsArg = (opts?: MkdirpOptions): MkdirpOptionsResolved => {\r\n    if (!opts) {\r\n      opts = { mode: 0o777 }\r\n    } else if (typeof opts === 'object') {\r\n      opts = { mode: 0o777, ...opts }\r\n    } else if (typeof opts === 'number') {\r\n      opts = { mode: opts }\r\n    } else if (typeof opts === 'string') {\r\n      opts = { mode: parseInt(opts, 8) }\r\n    } else {\r\n      throw new TypeError('invalid options argument')\r\n    }\r\n  \r\n    const resolved = opts as MkdirpOptionsResolved\r\n    const optsFs = opts.fs || {}\r\n  \r\n    opts.mkdir = opts.mkdir || optsFs.mkdir || mkdir\r\n  \r\n    opts.mkdirAsync = opts.mkdirAsync\r\n      ? opts.mkdirAsync\r\n      : async (\r\n          path: string,\r\n          options: MakeDirectoryOptions & { recursive?: boolean }\r\n        ): Promise<string | undefined> => {\r\n          return new Promise<string | undefined>((res, rej) =>\r\n            resolved.mkdir(path, options, (er, made) =>\r\n              er ? rej(er) : res(made)\r\n            )\r\n          )\r\n        }\r\n  \r\n    opts.stat = opts.stat || optsFs.stat || stat\r\n    opts.statAsync = opts.statAsync\r\n      ? opts.statAsync\r\n      : async (path: string) =>\r\n          new Promise((res, rej) =>\r\n            resolved.stat(path, (err, stats) => (err ? rej(err) : res(stats)))\r\n          )\r\n  \r\n    opts.statSync = opts.statSync || optsFs.statSync || statSync\r\n    opts.mkdirSync = opts.mkdirSync || optsFs.mkdirSync || mkdirSync\r\n  \r\n    return resolved\r\n  }\r\n  "]}