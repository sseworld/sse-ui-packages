{"version":3,"file":"bin.js","sourceRoot":"","sources":["../../../src/bin.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { version } from '../package.json'\r\nimport { MkdirpOptions } from './opts-arg.js'\r\n\r\nconst usage = () => `\r\nusage: mkdirp [DIR1,DIR2..] {OPTIONS}\r\n\r\n  Create each supplied directory including any necessary parent directories\r\n  that don't yet exist.\r\n\r\n  If the directory already exists, do nothing.\r\n\r\nOPTIONS are:\r\n\r\n  -m<mode>       If a directory needs to be created, set the mode as an octal\r\n  --mode=<mode>  permission string.\r\n\r\n  -v --version   Print the mkdirp version number\r\n\r\n  -h --help      Print this helpful banner\r\n\r\n  -p --print     Print the first directories created for each path provided\r\n\r\n  --manual       Use manual implementation, even if native is available\r\n`\r\n\r\nconst dirs: string[] = []\r\nconst opts: MkdirpOptions = {}\r\nlet doPrint: boolean = false\r\nlet dashdash = false\r\nlet manual = false\r\nfor (const arg of process.argv.slice(2)) {\r\n  if (dashdash) dirs.push(arg)\r\n  else if (arg === '--') dashdash = true\r\n  else if (arg === '--manual') manual = true\r\n  else if (/^-h/.test(arg) || /^--help/.test(arg)) {\r\n    console.log(usage())\r\n    process.exit(0)\r\n  } else if (arg === '-v' || arg === '--version') {\r\n    console.log(version)\r\n    process.exit(0)\r\n  } else if (arg === '-p' || arg === '--print') {\r\n    doPrint = true\r\n  } else if (/^-m/.test(arg) || /^--mode=/.test(arg)) {\r\n    // these don't get covered in CI, but work locally\r\n    // weird because the tests below show as passing in the output.\r\n    /* c8 ignore start */\r\n    const mode = parseInt(arg.replace(/^(-m|--mode=)/, ''), 8)\r\n    if (isNaN(mode)) {\r\n      console.error(`invalid mode argument: ${arg}\\nMust be an octal number.`)\r\n      process.exit(1)\r\n    }\r\n    /* c8 ignore stop */\r\n    opts.mode = mode\r\n  } else dirs.push(arg)\r\n}\r\n\r\nimport { mkdirp } from './index.js'\r\nconst impl = manual ? mkdirp.manual : mkdirp\r\nif (dirs.length === 0) {\r\n  console.error(usage())\r\n}\r\n\r\n// these don't get covered in CI, but work locally\r\n/* c8 ignore start */\r\nPromise.all(dirs.map(dir => impl(dir, opts)))\r\n  .then(made => (doPrint ? made.forEach(m => m && console.log(m)) : null))\r\n  .catch(er => {\r\n    console.error(er.message)\r\n    if (er.code) console.error('  code: ' + er.code)\r\n    process.exit(1)\r\n  })\r\n/* c8 ignore stop */\r\n"]}